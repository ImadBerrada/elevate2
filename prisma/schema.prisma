// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and user management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  avatar    String?
  role      UserRole @default(USER)
  assignedCompanyId String? // For direct company assignment
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  activities Activity[]
  contacts   Contact[]
  businesses Business[]
  employers  Employer[]
  companies  Company[]
  employees  Employee[]
  assetTypes AssetType[]
  managerAssignments ManagerAssignment[]
  accessLogs PlatformAccessLog[]
  
  // Assigned company relation
  assignedCompany Company? @relation("AssignedCompany", fields: [assignedCompanyId], references: [id], onDelete: SetNull)

  // Real Estate Relations
  propertyOwners PropertyOwner[]

  // Investor Relations
  investors Investor[]
  investorCommunications InvestorCommunication[]

  @@map("users")
}

// Company model for managing companies
model Company {
  id            String        @id @default(cuid())
  name          String
  description   String?
  industry      String
  size          String
  location      String
  website       String?
  email         String
  phone         String
  status        CompanyStatus @default(ACTIVE)
  foundedYear   Int?
  revenue       String?
  logo          String?
  employeeCount Int           @default(0)
  
  // New fields for trade license and assets
  tradeLicenseNumber String?
  tradeLicenseExpiry DateTime?
  tradeLicenseDocument String? // Base64 or file path
  
  userId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  employees Employee[]
  actualEmployees Employee[] @relation("ActualCompany")
  assets    CompanyAsset[]
  assignedManagers User[] @relation("AssignedCompany")
  managerAssignments ManagerAssignment[]
  
  // Marah Relations
  marahCustomers       MarahCustomer[]       @relation("MarahCustomers")
  marahGames          MarahGame[]           @relation("MarahGames")
  marahDrivers        MarahDriver[]         @relation("MarahDrivers")
  marahOrders         MarahOrder[]          @relation("MarahOrders")
  marahPayments       MarahPayment[]        @relation("MarahPayments")
  marahExpenses       MarahExpense[]        @relation("MarahExpenses")
  marahDeliveryCharges MarahDeliveryCharge[] @relation("MarahDeliveryCharges")
  marahSettings       MarahSetting[]        @relation("MarahSettings")

  @@map("companies")
}

// Employee model for managing employees
model Employee {
  id         String         @id @default(cuid())
  firstName  String
  lastName   String
  firstNameArabic String?
  lastNameArabic  String?
  email      String         @unique
  phone      String?
  position   String
  department String
  salary     String?        // Official contract salary
  actualSalary String?      // Actual salary
  startDate  DateTime
  status     EmployeeStatus @default(ACTIVE)
  location   String?
  manager    String?
  skills     String[]
  avatar     String?
  companyId  String         // Official company
  actualCompanyId String?   // Actual company (if different)
  userId     String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  actualCompany Company? @relation("ActualCompany", fields: [actualCompanyId], references: [id], onDelete: SetNull)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  visa    EmployeeVisa?

  @@map("employees")
}

// Employee visa details
model EmployeeVisa {
  id              String    @id @default(cuid())
  employeeId      String    @unique
  visaNumber      String?
  visaType        String?
  issueDate       DateTime?
  expiryDate      DateTime?
  sponsor         String?
  nationality     String?
  passportNumber  String?
  passportExpiry  DateTime?
  emiratesId      String?
  emiratesIdExpiry DateTime?
  laborCardNumber String?
  laborCardExpiry DateTime?
  visaDocument    String?   // Base64 or file path
  passportDocument String?  // Base64 or file path
  emiratesIdDocument String? // Base64 or file path
  laborCardDocument String? // Base64 or file path
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_visas")
}

// Activity model for tracking business network activities
model Activity {
  id          String       @id @default(cuid())
  title       String
  type        ActivityType
  date        DateTime
  notes       String?
  picture     String?
  points      Int
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}

// Contact model for managing professional contacts
model Contact {
  id            String        @id @default(cuid())
  picture       String?
  employer      String?
  firstName     String
  lastName      String
  gender        Gender?
  dateOfBirth   DateTime?
  maritalStatus MaritalStatus?
  relation      RelationType?
  category      String?
  rating        Int?          @default(1) // 1-3 rating
  email         String
  phone         String
  country       String?
  city          String?
  area          String?
  address       String?
  userId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

// Business model for managing business partnerships
model Business {
  id             String            @id @default(cuid())
  picture        String?
  name           String
  description    String?
  industry       String?
  size           String?
  location       String?
  revenue        String?
  founded        String?
  status         BusinessStatus    @default(PROSPECT)
  partnership    PartnershipType?
  dealValue      String?
  lastInteraction DateTime?
  rating         Int?              @default(1) // 1-5 rating
  tags           String[]
  userId         String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("businesses")
}

// Employer model for managing employer partnerships
model Employer {
  id           String   @id @default(cuid())
  picture      String?
  category     String
  nameArabic   String?
  nameEnglish  String
  description  String?
  industry     String?
  size         String?
  location     String?
  founded      String?
  status       EmployerStatus @default(NEW)
  partnership  String?
  openPositions Int?     @default(0)
  placementRate Float?   @default(0)
  avgSalary    String?
  lastPlacement DateTime?
  rating       Int?     @default(1) // 1-5 rating
  benefits     String[]
  tags         String[]
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("employers")
}

// Enums
enum UserRole {
  USER
  ADMIN
  MANAGER
  SUPER_ADMIN
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
}

enum ActivityType {
  MEETING
  CALL
  EMAIL
  NETWORKING
  PRESENTATION
  NEGOTIATION
  PARTNERSHIP
  DEAL
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
}

enum RelationType {
  FRIEND
  RELATIVE
  CONTACT
}

enum BusinessStatus {
  PROSPECT
  PARTNER
  NEGOTIATING
  INACTIVE
}

enum PartnershipType {
  STRATEGIC_ALLIANCE
  INVESTMENT_OPPORTUNITY
  CO_INVESTMENT
  JOINT_VENTURE
  STRATEGIC_INVESTMENT
  SERVICE_PARTNERSHIP
}

enum EmployerStatus {
  NEW
  ACTIVE
  PREMIUM
  INACTIVE
  PARTNERSHIP
}

enum AssetCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  DAMAGED
}

// Asset types with depreciation rates
model AssetType {
  id                String    @id @default(cuid())
  name              String    @unique
  depreciationRate  Float     // Percentage (e.g., 10.0 for 10%)
  description       String?
  fields            Json      // Dynamic fields for this asset type
  userId            String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets CompanyAsset[]

  @@map("asset_types")
}

// Company assets
model CompanyAsset {
  id              String     @id @default(cuid())
  name            String
  assetTypeId     String
  companyId       String
  purchaseValue   Float
  currentValue    Float
  purchaseDate    DateTime
  condition       AssetCondition @default(GOOD)
  location        String?
  serialNumber    String?
  description     String?
  customFields    Json       // Dynamic fields based on asset type
  documents       String[]   // Array of document URLs/base64
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  assetType AssetType @relation(fields: [assetTypeId], references: [id], onDelete: Cascade)
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("company_assets")
}

// ===== MARAH INFLATABLE GAMES RENTAL SYSTEM =====

// Customer model for Marah system
model MarahCustomer {
  id                  String              @id @default(cuid())
  name                String
  phone               String              @unique
  email               String?
  notes               String?
  status              MarahCustomerStatus @default(ACTIVE)
  customerType        MarahCustomerType   @default(REGULAR)
  balance             Decimal             @default(0) @db.Decimal(10, 2)
  loyaltyPoints       Int                 @default(0)
  totalOrders         Int                 @default(0)
  completedOrders     Int                 @default(0)
  totalSpent          Decimal             @default(0) @db.Decimal(10, 2)
  averageOrderValue   Decimal             @default(0) @db.Decimal(10, 2)
  lastOrderDate       DateTime?
  registrationDate    DateTime            @default(now())
  profilePicture      String?
  dateOfBirth         DateTime?
  emergencyContact    String?
  emergencyPhone      String?
  preferredLanguage   String              @default("en")
  marketingConsent    Boolean             @default(true)
  companyId           String              // Link to Company
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  // Relations
  company   Company                @relation("MarahCustomers", fields: [companyId], references: [id], onDelete: Cascade)
  addresses MarahCustomerAddress[]
  orders    MarahOrder[]

  @@map("marah_customers")
}

// Customer addresses for delivery
model MarahCustomerAddress {
  id         String  @id @default(cuid())
  customerId String
  name       String  // Address name (e.g., "Home", "Office")
  address    String
  zone       String? // For delivery charge calculation
  isDefault  Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  customer MarahCustomer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orders   MarahOrder[]

  @@map("marah_customer_addresses")
}

// Inflatable games/products
model MarahGame {
  id              String   @id @default(cuid())
  nameEn          String   // English name
  nameAr          String   // Arabic name
  description     String?
  category        String
  pricePerDay     Decimal  @db.Decimal(10, 2)
  pricePerWeek    Decimal? @db.Decimal(10, 2)
  pricePerMonth   Decimal? @db.Decimal(10, 2)
  isDiscountable  Boolean  @default(true)
  isAvailable     Boolean  @default(true)
  discountPercentage Int?  @default(0)
  imageUrl        String?
  dimensions      String?
  capacity        Int?
  ageGroup        String?
  setupTime       Int?     // Setup time in minutes
  images          String[] // Array of image URLs/paths
  companyId       String   // Link to Company
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  company    Company          @relation("MarahGames", fields: [companyId], references: [id], onDelete: Cascade)
  orderItems MarahOrderItem[]

  @@map("marah_games")
}

// Delivery drivers
model MarahDriver {
  id                  String            @id @default(cuid())
  name                String
  phone               String            @unique
  email               String?
  licenseNumber       String?
  vehicleInfo         String?
  vehicleRegistration String?
  status              MarahDriverStatus @default(ACTIVE)
  profilePicture      String?
  dateOfBirth         DateTime?
  address             String?
  emergencyContact    String?
  emergencyPhone      String?
  experience          String?           // Years of experience
  salary              Decimal?          @db.Decimal(10, 2)
  totalOrders         Int               @default(0)
  completedOrders     Int               @default(0)
  activeOrders        Int               @default(0)
  totalRevenue        Decimal           @default(0) @db.Decimal(10, 2)
  completionRate      Decimal           @default(0) @db.Decimal(5, 2)
  rating              Decimal           @default(0) @db.Decimal(3, 2)
  totalRatings        Int               @default(0)
  licenseDocument     String?
  vehicleDocument     String?
  companyId           String            // Link to Company
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relations
  company Company      @relation("MarahDrivers", fields: [companyId], references: [id], onDelete: Cascade)
  orders  MarahOrder[]
  expenses MarahExpense[] @relation("DriverExpenses")

  @@map("marah_drivers")
}

// Main order model
model MarahOrder {
  id              String           @id @default(cuid())
  orderNumber     String           @unique
  customerId      String
  addressId       String
  driverId        String?
  status          MarahOrderStatus @default(PENDING)
  paymentStatus   MarahPaymentStatus @default(PENDING)
  orderDate       DateTime         @default(now())
  eventDate       DateTime         // When the event is scheduled
  eventEndDate    DateTime         // When games should be collected
  eventTime       String?          // Preferred event time
  setupTime       String?          // Preferred setup time
  notes           String?
  source          String           @default("PHONE") // Order source
  companyId       String           // Link to Company
  
  // Pricing
  subtotal        Decimal          @db.Decimal(10, 2)
  discountAmount  Decimal          @default(0) @db.Decimal(10, 2)
  deliveryCharge  Decimal          @default(0) @db.Decimal(10, 2)
  totalAmount     Decimal          @db.Decimal(10, 2)
  
  // Delivery tracking
  deliveredAt     DateTime?
  collectedAt     DateTime?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  company     Company              @relation("MarahOrders", fields: [companyId], references: [id], onDelete: Cascade)
  customer    MarahCustomer        @relation(fields: [customerId], references: [id])
  address     MarahCustomerAddress @relation(fields: [addressId], references: [id])
  driver      MarahDriver?         @relation(fields: [driverId], references: [id])
  items       MarahOrderItem[]
  payments    MarahPayment[]

  @@map("marah_orders")
}

// Order items (games in each order)
model MarahOrderItem {
  id        String  @id @default(cuid())
  orderId   String
  gameId    String
  quantity  Int     @default(1)
  pricePerDay Decimal @db.Decimal(10, 2)
  days      Int     @default(1)
  totalPrice Decimal @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  // Relations
  order MarahOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  game  MarahGame  @relation(fields: [gameId], references: [id])

  @@map("marah_order_items")
}

// Payment tracking
model MarahPayment {
  id            String              @id @default(cuid())
  orderId       String
  amount        Decimal             @db.Decimal(10, 2)
  method        MarahPaymentMethod  // Changed from paymentMethod to method
  status        MarahPaymentStatus  @default(PENDING)
  transactionId String?
  notes         String?
  paidAt        DateTime?
  companyId     String              // Link to Company
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  // Relations
  order   MarahOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  company Company    @relation("MarahPayments", fields: [companyId], references: [id], onDelete: Cascade)

  @@map("marah_payments")
}

// Business expenses tracking
model MarahExpense {
  id          String               @id @default(cuid())
  description String
  amount      Decimal              @db.Decimal(10, 2)
  category    MarahExpenseCategory
  date        DateTime             @default(now())
  receipt     String?              // Receipt image/document
  notes       String?
  vendor      String?              // Vendor/supplier name
  location    String?              // Where expense occurred
  receiptUrl  String?              // Receipt document URL
  driverId    String?              // Link to driver for driver-specific expenses
  isRecurring Boolean              @default(false)
  tags        String[]             // Expense tags for categorization
  companyId   String               // Link to Company
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  // Relations
  company Company     @relation("MarahExpenses", fields: [companyId], references: [id], onDelete: Cascade)
  driver  MarahDriver? @relation("DriverExpenses", fields: [driverId], references: [id])

  @@map("marah_expenses")
}

// Delivery charges by zone
model MarahDeliveryCharge {
  id            String   @id @default(cuid())
  zone          String   
  area          String?
  charge        Decimal? @db.Decimal(10, 2) // Keep old field for backward compatibility
  baseCharge    Decimal? @db.Decimal(10, 2)
  perKmCharge   Decimal? @db.Decimal(10, 2)
  minimumCharge Decimal? @db.Decimal(10, 2)
  maximumCharge Decimal? @db.Decimal(10, 2)
  estimatedTime Int?     // in minutes
  isActive      Boolean  @default(true)
  notes         String?
  companyId     String   // Link to Company
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  company Company @relation("MarahDeliveryCharges", fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([zone, companyId])
  @@map("marah_delivery_charges")
}

// System settings
model MarahSetting {
  id        String   @id @default(cuid())
  key       String   
  value     String
  companyId String   // Link to Company
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company Company @relation("MarahSettings", fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([key, companyId])

  @@map("marah_settings")
}

// Enums for Marah system
enum MarahOrderStatus {
  PENDING     // 1 - New orders awaiting processing
  CONFIRMED   // Order confirmed and scheduled
  ASSIGNED    // Driver assigned
  DELIVERED   // Games delivered and set up
  ACTIVE      // Games are being used (rental period)
  COLLECTING  // Driver collecting games
  COMPLETED   // 2 - Successfully fulfilled orders
  CANCELLED   // 3 - Cancelled orders
}

enum MarahDriverStatus {
  ACTIVE
  INACTIVE
  BUSY
}

enum MarahPaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  ONLINE
}

enum MarahPaymentStatus {
  PENDING
  PAID
  PARTIAL
  REFUNDED
}

enum MarahExpenseCategory {
  FUEL
  MAINTENANCE
  MARKETING
  SUPPLIES
  UTILITIES
  SALARIES
  RENT
  INSURANCE
  EQUIPMENT
  REPAIRS
  OFFICE_SUPPLIES
  PROFESSIONAL_SERVICES
  TRAVEL
  TRAINING
  SOFTWARE
  OTHER
}

enum MarahCustomerStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  SUSPENDED
}

enum MarahCustomerType {
  REGULAR
  VIP
  PREMIUM
  CORPORATE
  INDIVIDUAL
  BUSINESS
}

// ========================================
// REAL ESTATE MANAGEMENT SYSTEM MODELS
// ========================================

// Property Owner model
model PropertyOwner {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  phone     String
  address   String?
  city      String?
  country   String?
  notes     String?
  avatar    String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  properties Property[]

  @@map("property_owners")
}

// Property Type model
model PropertyType {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "Apartment", "House", "Commercial", "Villa"
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  properties Property[]

  @@map("property_types")
}

// Property model
model Property {
  id            String    @id @default(cuid())
  name          String
  description   String?
  address       String
  city          String
  area          String?
  country       String    @default("UAE")
  floorArea     Float?    // in sqft
  lotArea       Float?    // in sqft
  purchaseValue Decimal?  @db.Decimal(15, 2)
  purchaseDate  DateTime?
  propertyTypeId String
  ownerId       String
  notes         String?
  status        PropertyStatus @default(ACTIVE)
  occupancyRate Float?    @default(0) // 0-100%
  // Financial and occupancy management fields
  expectedMonthlyRent   Decimal? @db.Decimal(10, 2)
  expectedAnnualExpenses Decimal? @db.Decimal(10, 2)
  totalUnits           Int?     @default(0)
  occupiedUnits        Int?     @default(0)
  // Property image
  image         String?   // URL or file path to property image
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  propertyType    PropertyType         @relation(fields: [propertyTypeId], references: [id])
  owner           PropertyOwner        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  rentalUnits     PropertyRentalUnit[]
  expenses        PropertyExpense[]
  appliances      PropertyAppliance[]
  attachments     PropertyAttachment[]
  agreements      TenantAgreement[]
  maintenanceRequests MaintenanceRequest[]

  @@map("properties")
}

// Rental Unit Type model
model RentalUnitType {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "Studio", "1BR", "2BR", "3BR", "Penthouse"
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rentalUnits PropertyRentalUnit[]

  @@map("rental_unit_types")
}

// Property Rental Unit model
model PropertyRentalUnit {
  id             String    @id @default(cuid())
  unitNumber     String    // e.g., "101", "A-1", "Ground Floor"
  unitTypeId     String
  propertyId     String
  area           Float?    // in sqft
  bedrooms       Int?      @default(0)
  bathrooms      Int?      @default(0)
  parkingSpots   Int?      @default(0)
  rentAmount     Decimal   @db.Decimal(10, 2)
  securityDeposit Decimal? @db.Decimal(10, 2)
  status         RentalUnitStatus @default(VACANT)
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  property    Property          @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  unitType    RentalUnitType    @relation(fields: [unitTypeId], references: [id])
  agreements  TenantAgreement[]

  @@unique([propertyId, unitNumber])
  @@map("property_rental_units")
}

// Tenant model
model Tenant {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String   @unique
  phone       String
  alternatePhone String?
  nationality String?
  passportNumber String?
  emiratesId  String?
  occupation  String?
  company     String?
  monthlyIncome Decimal? @db.Decimal(10, 2)
  notes       String?
  avatar      String?
  status      TenantStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  agreements TenantAgreement[]

  @@map("tenants")
}

// Tenant Agreement model
model TenantAgreement {
  id               String    @id @default(cuid())
  agreementNumber  String    @unique // AGT-XXXXXX format
  propertyId       String
  rentalUnitId     String
  tenantId         String
  startDate        DateTime
  endDate          DateTime
  rentAmount       Decimal   @db.Decimal(10, 2)
  securityDeposit  Decimal?  @db.Decimal(10, 2)
  commissionAmount Decimal?  @db.Decimal(10, 2)
  paymentDueDate   Int       @default(1) // Day of month (1-31)
  paymentFrequency PaymentFrequency @default(MONTHLY)
  utilities        String?   // JSON string of utilities included
  terms            String?   // Agreement terms and conditions
  notes            String?
  status           AgreementStatus @default(ACTIVE)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  property    Property           @relation(fields: [propertyId], references: [id])
  rentalUnit  PropertyRentalUnit @relation(fields: [rentalUnitId], references: [id])
  tenant      Tenant             @relation(fields: [tenantId], references: [id])
  invoices    RealEstateInvoice[]
  payments    TenantPayment[]

  @@map("tenant_agreements")
}

// Payment Method model
model PaymentMethod {
  id        String   @id @default(cuid())
  name      String   @unique // e.g., "Cash", "Bank Transfer", "Credit Card", "Cheque"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenantPayments TenantPayment[]

  @@map("payment_methods")
}

// Tenant Payment model
model TenantPayment {
  id              String    @id @default(cuid())
  agreementId     String
  amount          Decimal   @db.Decimal(10, 2)
  paymentDate     DateTime
  paymentMethodId String
  referenceNumber String?   // Bank reference, cheque number, etc.
  notes           String?
  isTaxable       Boolean   @default(true)
  receiptNumber   String?   @unique
  status          PaymentStatus @default(COMPLETED)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  agreement     TenantAgreement @relation(fields: [agreementId], references: [id])
  paymentMethod PaymentMethod   @relation(fields: [paymentMethodId], references: [id])

  @@map("tenant_payments")
}

// Real Estate Invoice model
model RealEstateInvoice {
  id           String    @id @default(cuid())
  invoiceNumber String   @unique // INV-XXXXXX format
  agreementId  String
  amount       Decimal   @db.Decimal(10, 2)
  dueDate      DateTime
  issueDate    DateTime  @default(now())
  description  String?
  taxAmount    Decimal?  @db.Decimal(10, 2)
  totalAmount  Decimal   @db.Decimal(10, 2)
  notes        String?
  status       InvoiceStatus @default(PENDING)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  agreement TenantAgreement @relation(fields: [agreementId], references: [id])

  @@map("real_estate_invoices")
}

// Property Expense model
model PropertyExpense {
  id              String    @id @default(cuid())
  propertyId      String
  category        ExpenseCategory
  description     String
  amount          Decimal   @db.Decimal(10, 2)
  expenseDate     DateTime
  vendor          String?
  invoiceNumber   String?
  isTaxDeductible Boolean   @default(false)
  isRecurring     Boolean   @default(false)
  includeInTenantInvoice Boolean @default(false)
  notes           String?
  receiptDocument String? // Base64 or file path
  status          ExpenseStatus @default(APPROVED)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_expenses")
}

// Property Appliance model
model PropertyAppliance {
  id               String    @id @default(cuid())
  propertyId       String
  name             String    // e.g., "AC Unit 1", "Refrigerator", "Washing Machine"
  brand            String?
  model            String?
  serialNumber     String?
  purchaseDate     DateTime?
  purchasePrice    Decimal?  @db.Decimal(10, 2)
  warrantyExpiry   DateTime?
  installationDate DateTime?
  condition        ApplianceCondition @default(GOOD)
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_appliances")
}

// Property Attachment model
model PropertyAttachment {
  id          String    @id @default(cuid())
  propertyId  String
  fileName    String
  fileType    AttachmentType
  fileSize    Int?      // in bytes
  filePath    String    // Base64 or file path
  description String?
  uploadedAt  DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_attachments")
}

// ========================================
// REAL ESTATE ENUMS
// ========================================

enum PropertyStatus {
  ACTIVE
  INACTIVE
  UNDER_RENOVATION
  FOR_SALE
}

enum RentalUnitStatus {
  VACANT
  OCCUPIED
  MAINTENANCE
  RESERVED
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  BLACKLISTED
}

enum AgreementStatus {
  ACTIVE
  EXPIRED
  TERMINATED
  PENDING
}

enum PaymentFrequency {
  MONTHLY
  QUARTERLY
  SEMI_ANNUALLY
  ANNUALLY
}

enum PaymentStatus {
  COMPLETED
  PENDING
  FAILED
  REFUNDED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum ExpenseCategory {
  MAINTENANCE
  UTILITIES
  INSURANCE
  TAXES
  MANAGEMENT_FEES
  REPAIRS
  CLEANING
  LANDSCAPING
  SECURITY
  OTHER
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ApplianceCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  NEEDS_REPLACEMENT
}

enum AttachmentType {
  IMAGE
  DOCUMENT
  VIDEO
  FLOOR_PLAN
  CONTRACT
  INVOICE
  OTHER
}

// Maintenance Request model for property maintenance management
model MaintenanceRequest {
  id              String                @id @default(cuid())
  propertyId      String
  title           String
  description     String
  priority        MaintenancePriority   @default(MEDIUM)
  status          MaintenanceStatus     @default(PENDING)
  category        MaintenanceCategory   @default(OTHER)
  unitNumber      String?
  estimatedCost   Decimal?
  actualCost      Decimal?
  assignedTo      String?
  requestDate     String                // ISO date string
  completionDate  String?               // ISO date string
  tenantContact   Json?                 // JSON object for tenant contact details
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("maintenance_requests")
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenanceCategory {
  PLUMBING
  ELECTRICAL
  HVAC
  CLEANING
  PAINTING
  APPLIANCE
  SECURITY
  OTHER
}

// ========================================
// INVESTOR MODELS
// ========================================

// Investor model for managing investor relationships
model Investor {
  id                String             @id @default(cuid())
  name              String
  type              InvestorType
  investment        Float
  stake             Float
  joinDate          DateTime
  status            InvestorStatus     @default(ACTIVE)
  headquarters      String?
  website           String?
  fundSize          Float?
  investmentFocus   String[]
  lastCommunication DateTime?
  nextMeeting       DateTime?
  performanceRating Float?             @default(0)
  riskProfile       RiskProfile        @default(MEDIUM)
  notes             String?
  userId            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Contact information
  contact           InvestorContact?
  
  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  communications    InvestorCommunication[]

  @@map("investors")
}

// Investor contact information
model InvestorContact {
  id              String   @id @default(cuid())
  investorId      String   @unique
  email           String
  phone           String?
  primaryContact  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  investor        Investor @relation(fields: [investorId], references: [id], onDelete: Cascade)

  @@map("investor_contacts")
}

// Investor communications tracking
model InvestorCommunication {
  id          String                    @id @default(cuid())
  investorId  String
  type        CommunicationType
  subject     String
  content     String?
  date        DateTime                  @default(now())
  status      CommunicationStatus       @default(SENT)
  priority    CommunicationPriority     @default(MEDIUM)
  userId      String
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt

  // Relations
  investor    Investor                  @relation(fields: [investorId], references: [id], onDelete: Cascade)
  user        User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("investor_communications")
}

// ========================================
// INVESTOR ENUMS
// ========================================

enum InvestorType {
  INSTITUTIONAL
  PRIVATE_EQUITY
  VENTURE_CAPITAL
  ANGEL
  FAMILY_OFFICE
  SOVEREIGN_WEALTH
}

enum InvestorStatus {
  ACTIVE
  INACTIVE
  PENDING
  EXITED
}

enum RiskProfile {
  LOW
  MEDIUM
  HIGH
}

enum CommunicationType {
  EMAIL
  MEETING
  CALL
  REPORT
  PROPOSAL
}

enum CommunicationStatus {
  SENT
  RECEIVED
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum CommunicationPriority {
  LOW
  MEDIUM
  HIGH
}

// ========================================
// MANAGER ASSIGNMENT MODELS
// ========================================

// Manager assignment model for managing company-manager relationships
model ManagerAssignment {
  id          String   @id @default(cuid())
  userId      String
  companyId   String
  platforms   String[] // Array of platform names the manager can access
  permissions Json     // JSON object containing detailed permissions
  isActive    Boolean  @default(true)
  assignedBy  String?  // User ID of who assigned this manager
  assignedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Unique constraint to prevent duplicate assignments
  @@unique([userId, companyId])
  @@map("manager_assignments")
}

// Platform access log model for tracking manager access
model PlatformAccessLog {
  id          String   @id @default(cuid())
  userId      String
  companyId   String
  platform    String   // Platform name (e.g., "marah", "real-estate", "employees")
  action      String   // Action performed (e.g., "login", "view", "edit", "delete")
  ipAddress   String?
  userAgent   String?
  accessedAt  DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("platform_access_logs")
}

// ========================================
// BRIDGE RETREATS MODELS
// ========================================

// Retreat model for managing retreat programs
model Retreat {
  id                  String        @id @default(cuid())
  title               String
  description         String
  type                RetreatType
  status              RetreatStatus @default(DRAFT)
  duration            Int           // Duration in days
  capacity            Int
  price               Float
  startDate           DateTime
  endDate             DateTime
  location            String
  instructor          String
  amenities           String[]      // Array of amenities
  requirements        String[]      // Array of requirements
  inclusions          String[]      // What's included
  exclusions          String[]      // What's not included
  cancellationPolicy  String?
  specialInstructions String?
  images              String[]      // Array of image URLs
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Relations
  activities RetreatActivity[]
  bookings   RetreatBooking[]
  reviews    RetreatReview[]

  @@map("retreats")
}

// Retreat activity model for managing activities within retreats
model RetreatActivity {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int      // Duration in minutes
  instructor  String?
  capacity    Int?
  equipment   String[] // Required equipment
  retreatId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  retreat Retreat @relation(fields: [retreatId], references: [id], onDelete: Cascade)

  @@map("retreat_activities")
}

// Guest model for managing retreat guests
model RetreatGuest {
  id          String      @id @default(cuid())
  firstName   String
  lastName    String
  email       String      @unique
  phone       String?
  dateOfBirth DateTime?
  nationality String?
  address     String?
  emergencyContact String?
  emergencyPhone   String?
  dietaryRestrictions String[]
  medicalConditions   String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  bookings RetreatBooking[]
  reviews  RetreatReview[]

  @@map("retreat_guests")
}

// Booking model for managing retreat bookings
model RetreatBooking {
  id              String        @id @default(cuid())
  retreatId       String
  guestId         String
  status          RetreatBookingStatus @default(PENDING)
  checkInDate     DateTime
  checkOutDate    DateTime
  numberOfGuests  Int           @default(1)
  totalAmount     Float
  paidAmount      Float         @default(0)
  paymentMethod   String?
  paymentStatus   RetreatPaymentStatus @default(PENDING)
  specialRequests String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  retreat Retreat      @relation(fields: [retreatId], references: [id], onDelete: Cascade)
  guest   RetreatGuest @relation(fields: [guestId], references: [id], onDelete: Cascade)

  @@map("retreat_bookings")
}

// Review model for managing retreat reviews
model RetreatReview {
  id        String   @id @default(cuid())
  retreatId String
  guestId   String
  rating    Int      // 1-5 rating
  title     String?
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  retreat Retreat      @relation(fields: [retreatId], references: [id], onDelete: Cascade)
  guest   RetreatGuest @relation(fields: [guestId], references: [id], onDelete: Cascade)

  @@unique([retreatId, guestId]) // One review per guest per retreat
  @@map("retreat_reviews")
}

// ========================================
// BRIDGE RETREATS ENUMS
// ========================================

enum RetreatType {
  WELLNESS
  CORPORATE
  SPIRITUAL
  ADVENTURE
  EDUCATIONAL
}

enum RetreatStatus {
  DRAFT
  ACTIVE
  FULL
  ARCHIVED
}

enum RetreatBookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  WAITLISTED
}

enum RetreatPaymentStatus {
  PENDING
  PARTIAL
  PAID
  REFUNDED
}
